apply plugin: 'com.android.application'
apply plugin: 'com.novoda.build-properties'
apply plugin: 'com.github.triplet.play'
apply plugin: 'io.fabric'

def signingFile = file('props/release.signing')
buildProperties {
    signing.file signingFile.exists() ? signingFile : file('props/debug.signing')
    secrets.file file('props/secrets.properties')
}

def secrets = buildProperties.secrets
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.tasomaniac.dashclock.hackerspace"
        minSdkVersion 17
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigProperty "ANALYTICS_KEY", secrets['analytics_key'] | ''

        resConfigs "en", "tr"
    }

    signingConfigs {
        debug.storeFile file('props/debug.keystore')
        release.signingConfigProperties buildProperties.signing
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            signingConfig signingConfigs.debug
            versionNameSuffix "-debug"
        }

        release {
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        floss {
            applicationIdSuffix '.floss'
            versionName "${rootProject.ext.versionName}-floss"
        }
        play {}
    }

    lintOptions {
        textReport true
        textOutput 'stdout'

        fatal 'UnusedResources'
        warning 'InvalidPackage'
    }
}

play {
    serviceAccountEmail = secrets['play_service_account'].or('').string
    pk12File = file(secrets['play_key_file'].or('no_file.p12').string)
    track = 'beta'
}

dependencies {
    def supportLibVersion = '25.2.0'
    def daggerVersion = '2.9'

    compile 'com.google.android.apps.dashclock:dashclock-api:2.0.0'

    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-moshi:2.1.0'

    compile "com.android.support:support-v4:$supportLibVersion"
    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"

    compile 'com.jakewharton.timber:timber:4.5.1'

    compile "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    compile 'com.tasomaniac:delayed-progress:0.4'
    compile 'com.tasomaniac:integrationpreference:0.2'

    playCompile 'com.google.android.gms:play-services-analytics:10.2.0'
    playCompile 'com.crashlytics.sdk.android:crashlytics:2.6.6'
}
