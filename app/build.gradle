apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

Properties local_properties = new Properties()
File localPropertiesFile = project.rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    local_properties.load(localPropertiesFile.newDataInputStream())
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.tasomaniac.dashclock.hackerspace"
        minSdkVersion 17
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode rootProject.ext.versionMajor * 10000 + rootProject.ext.versionMinor * 1000 + rootProject.ext.versionPatch * 100 + rootProject.ext.versionBuild
        versionName "${rootProject.ext.versionMajor}.${rootProject.ext.versionMinor}" + ((rootProject.ext.versionPatch != 0) ? ".${rootProject.ext.versionPatch}" : "")

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""

        buildConfigField "String", "ANALYTICS_KEY", local_properties.analytics_key != null ?
                "\"" + local_properties.analytics_key + "\"" : "\"\""

        resConfigs "en", "tr"
    }

    signingConfigs {
        debug {
            storeFile file("../distribution/debug.keystore")
        }

        release {
            storeFile file("../distribution/" + (local_properties.release_keystore_name ?: "debug.keystore"))
            keyAlias(local_properties.release_keystore_alias ?: "androiddebugkey")
            storePassword(local_properties.release_keystore_pwd ?: "android")
            keyPassword(local_properties.release_keystore_pwd2 ?: "android")
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            signingConfig signingConfigs.debug
            versionNameSuffix "-debug"
        }

        release {
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError true
        textReport true
        textOutput 'stdout'

        fatal 'UnusedResources'
        warning 'InvalidPackage'
    }
}

dependencies {
    def supportLibVersion = '25.1.1'

    compile 'com.google.android.apps.dashclock:dashclock-api:2.0.0'

    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-moshi:2.1.0'

    compile "com.android.support:support-v4:$supportLibVersion"
    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"

    compile 'com.jakewharton.timber:timber:4.5.1'

    compile 'com.google.dagger:dagger:2.9'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.9'

    compile 'com.tasomaniac:delayed-progress:0.4'
    compile 'com.tasomaniac:integrationpreference:0.2'

    compile 'com.google.android.gms:play-services-analytics:10.2.0'
    compile 'com.crashlytics.sdk.android:crashlytics:2.6.6'
}
